
not python 3

### TODO

* enhance search with operators
* write full text search indexing
* unfold whitespace in header fields?
* Support comments and encoded-word in parseaddr.py
  and convert encoded-word in email displayname to utf8
* Check encoding on downloading and saving emails?
* Add GPG signed and encrypted to autolabelling
* Add license conforming lrparsing.py license
* Documentation

### For use (not implemented ...yet)

* forward script
  Forward mails from postfix to upload script, to be put into ~/.forward

* ... more to come

### Python Modules
##### Executable
* upload
  Parse and upload a given mail (extract metadata from header).
  If a mail with the same hash exists, you have to give --override.
  If --override is given, only the metadata will be updated, not the
  original mail attachment

* search
  Search for mail hashes by metadata.
  Python function returns docs. Script prints list of hashes to stdout.

* download
  Download mails with given hashes read from stdin into
  ** mbox or
  ** Maildir or
  ** execute a command for every mail with the mail given as stdin or
  ** write them simply to stdout (with no separation, only useful for one email)
  Every beginning of a line from stdin starting with hex chars is taken as a
  doc id and is downloaded. Add comments / more data separated with a whitespace
  after the hash, or start lines with whitespace or non hey char to ignore them.

* read
  Execute a command for every file in a mbox / Maildir

* view
  Open a local mailbox and make stats. Then open mutt. When mutt exits, check
  changes to mailbox and report hashes of changed mails.

##### Modules only

* config
  Configurations for logs, the CouchDB connection and other things.

##### To come

* keywords
  Search mails by keywords with extra index file not included in database for
  security reasons. So you can index you decryptet PGP Mails :-) and the index
  is saved locally on your computer.

### Document format

doc_id: sha256 hash of whole mail as in 'data' field
type: 'mail'
upload_date: date UTC, when the mail was uploaded in YYYY-MM-DD hh:mm:ss
            `date "+%Y-%M-%d %H:%m:%S"` i.e. 2013-12-08 11:12:42
labels: list of unique label names, all lowercase

date: date UTC given in mail, in YYYY-MM-DD hh:mm:ss
from: array of email addresses of senders, all lowercase
to: array of email addresses of receivers, all lowercase
subject: string containing subject

original message as standalone attachment in named 'mail'
  with content-type: text/plain

### Database Views
The design document is saved under /_design-post
Upload it to your DB with curl or on any other way.

  from

Emits one entry for every sender in From: field of a mail.
So you can search with
.../_design/post/_view/from?startkey=%22someone%22&endkey=%22xaver%22
Key: one address spec
Value: doc

  to

Emits one entry for every recipient in To: field of a mail.
Key: one address spec
Value: doc

  labels

Emits one entry for every label listed in doc.labels .
Key: one label string
Value: doc

  labels_list

A unique list of all labels used in all doc.labels .
Functions: Map & Reduce
Key: Null
Value: List of all labels

  inbox

All mails labeled "unread".
Functions: Map
Key: date
Value: flags

